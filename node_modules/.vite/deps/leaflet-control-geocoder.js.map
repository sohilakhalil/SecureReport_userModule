{
  "version": 3,
  "sources": ["../../leaflet-control-geocoder/src/geocoders/api.ts", "../../leaflet-control-geocoder/src/util.ts", "../../leaflet-control-geocoder/src/geocoders/arcgis.ts", "../../leaflet-control-geocoder/src/geocoders/bing.ts", "../../leaflet-control-geocoder/src/geocoders/azure.ts", "../../leaflet-control-geocoder/src/geocoders/google.ts", "../../leaflet-control-geocoder/src/geocoders/here.ts", "../../leaflet-control-geocoder/src/geocoders/latlng.ts", "../../leaflet-control-geocoder/src/geocoders/mapbox.ts", "../../leaflet-control-geocoder/src/geocoders/mapquest.ts", "../../leaflet-control-geocoder/src/geocoders/neutrino.ts", "../../leaflet-control-geocoder/src/geocoders/nominatim.ts", "../../leaflet-control-geocoder/src/geocoders/open-location-code.ts", "../../leaflet-control-geocoder/src/geocoders/opencage.ts", "../../leaflet-control-geocoder/src/geocoders/pelias.ts", "../../leaflet-control-geocoder/src/geocoders/photon.ts", "../../leaflet-control-geocoder/src/geocoders/what3words.ts", "../../leaflet-control-geocoder/src/control.ts", "../../leaflet-control-geocoder/src/index.ts"],
  "sourcesContent": ["import * as L from 'leaflet';\n\n/**\n * Context for geocoding operations\n */\nexport interface GeocodingContext {\n  /**\n   * The map instance\n   */\n  map: L.Map;\n}\n\n/**\n * An object that represents a result from a geocoding query\n */\nexport interface GeocodingResult {\n  /**\n   * Name of found location\n   */\n  name: string;\n  /**\n   * The bounds of the location\n   */\n  bbox: L.LatLngBounds;\n  /**\n   * The center coordinate of the location\n   */\n  center: L.LatLng;\n  /**\n   * URL for icon representing result; optional\n   */\n  icon?: string;\n  /**\n   * HTML formatted representation of the name\n   */\n  html?: string;\n  /**\n   * Additional properties returned by the geocoder\n   */\n  properties?: any;\n}\n\n/**\n * An interface implemented to respond to geocoding queries\n */\nexport interface IGeocoder {\n  /**\n   * Performs a geocoding query and returns the results as promise\n   * @param query the query\n   * @param context the context for the query\n   */\n  geocode(query: string, context?: GeocodingContext): Promise<GeocodingResult[]>;\n  /**\n   * Performs a geocoding query suggestion (this happens while typing) and returns the results as promise\n   * @param query the query\n   * @param context the context for the query\n   */\n  suggest?(query: string, context?: GeocodingContext): Promise<GeocodingResult[]>;\n  /**\n   * Performs a reverse geocoding query and returns the results as promise\n   * @param location the coordinate to reverse geocode\n   * @param scale the map scale possibly used for reverse geocoding\n   */\n  reverse?(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]>;\n}\n\nexport interface GeocoderOptions {\n  /**\n   * URL of the service\n   */\n  serviceUrl: string;\n  /**\n   * Additional URL parameters (strings) that will be added to geocoding requests\n   */\n  geocodingQueryParams?: Record<string, unknown>;\n  /**\n   * Additional URL parameters (strings) that will be added to reverse geocoding requests\n   */\n  reverseQueryParams?: Record<string, unknown>;\n  /**\n   * API key to use this service\n   */\n  apiKey?: string;\n}\n\n/**\n * @internal\n */\nexport function geocodingParams(\n  options: GeocoderOptions,\n  params: Record<string, unknown>\n): Record<string, unknown> {\n  return Object.assign(params, options.geocodingQueryParams);\n}\n\n/**\n * @internal\n */\nexport function reverseParams(\n  options: GeocoderOptions,\n  params: Record<string, unknown>\n): Record<string, unknown> {\n  return Object.assign(params, options.reverseQueryParams);\n}\n", "// Adapted from handlebars.js\n// https://github.com/wycats/handlebars.js/\n/**\n * @internal\n */\nconst badChars = /[&<>\"'`]/g;\n/**\n * @internal\n */\nconst possible = /[&<>\"'`]/;\n/**\n * @internal\n */\nconst escape: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n\n/**\n * @internal\n */\nfunction escapeChar(chr: string) {\n  return escape[chr];\n}\n\n/**\n * @internal\n */\nexport function htmlEscape(string?: string): string {\n  if (string == null) {\n    return '';\n  } else if (!string) {\n    return string + '';\n  }\n\n  // Force a string conversion as this will be done by the append regardless and\n  // the regex test will do this transparently behind the scenes, causing issues if\n  // an object's to string has escaped characters in it.\n  string = '' + string;\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\n/**\n * @internal\n */\nexport function getJSON<T>(url: string, params: Record<string, unknown>): Promise<T> {\n  const headers = { Accept: 'application/json' };\n  const request = new URL(url);\n  Object.entries(params).forEach(([key, value]) => {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      request.searchParams.append(key, v);\n    });\n  });\n  return fetch(request.toString(), { headers }).then(response => response.json());\n}\n\n/**\n * @internal\n */\nexport function template(str: string, data: Record<string, any>): string {\n  return str.replace(/\\{ *([\\w_]+) *\\}/g, (str, key) => {\n    let value = data[key];\n    if (value === undefined) {\n      value = '';\n    } else if (typeof value === 'function') {\n      value = value(data);\n    }\n    return htmlEscape(value);\n  });\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface ArcGisOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [ArcGIS geocoder](https://developers.arcgis.com/features/geocoding/)\n */\nexport class ArcGis implements IGeocoder {\n  options: ArcGisOptions = {\n    serviceUrl: 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer',\n    apiKey: ''\n  };\n\n  constructor(options?: Partial<ArcGisOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      token: this.options.apiKey,\n      SingleLine: query,\n      outFields: 'Addr_Type',\n      forStorage: false,\n      maxLocations: 10,\n      f: 'json'\n    });\n\n    const data = await getJSON<ArcGisResponse>(\n      this.options.serviceUrl + '/findAddressCandidates',\n      params\n    );\n    return data.candidates.map((loc): GeocodingResult => {\n      const center = new L.LatLng(loc.location.y, loc.location.x);\n      const bbox = new L.LatLngBounds(\n        new L.LatLng(loc.extent.ymax, loc.extent.xmax),\n        new L.LatLng(loc.extent.ymin, loc.extent.xmin)\n      );\n      return {\n        name: loc.address,\n        bbox,\n        center\n      };\n    });\n  }\n\n  suggest(query: string): Promise<GeocodingResult[]> {\n    return this.geocode(query);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      location: location.lng + ',' + location.lat,\n      distance: 100,\n      f: 'json'\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + '/reverseGeocode', params);\n    if (!data || data.error) {\n      return [];\n    }\n    const center = new L.LatLng(data.location.y, data.location.x);\n    const bbox = new L.LatLngBounds(center, center);\n    return [\n      {\n        name: data.address.Match_addr,\n        center,\n        bbox\n      }\n    ];\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link ArcGis}\n * @param options the options\n */\nexport function arcgis(options?: Partial<ArcGisOptions>) {\n  return new ArcGis(options);\n}\n\n/**\n * @internal\n */\nexport interface ArcGisResponse {\n  spatialReference: {\n    wkid: number;\n    latestWkid: number;\n  };\n  candidates: Candidate[];\n}\n\ninterface Candidate {\n  address: string;\n  location: {\n    x: number;\n    y: number;\n  };\n  score: number;\n  attributes: {\n    Addr_Type: string;\n  };\n  extent: {\n    xmin: number;\n    ymin: number;\n    xmax: number;\n    ymax: number;\n  };\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { GeocoderOptions, geocodingParams, GeocodingResult, IGeocoder, reverseParams } from './api';\n\nexport interface BingOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [Bing Locations API](https://docs.microsoft.com/en-us/bingmaps/rest-services/locations/)\n *\n * Bing Maps for Enterprise is deprecated and will be retired.\n * Free (Basic) account customers can continue to use Bing Maps for Enterprise services until June 30th, 2025.\n * Enterprise account customers can continue to use Bing Maps for Enterprise services until June 30th, 2028.\n */\nexport class Bing implements IGeocoder {\n  options: BingOptions = {\n    serviceUrl: 'https://dev.virtualearth.net/REST/v1/Locations/'\n  };\n\n  constructor(options?: Partial<BingOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      query: query,\n      key: this.options.apiKey\n    });\n    const data = await getJSON<any>(this.options.serviceUrl, params);\n    return this._parseResults(data);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey\n    });\n    const data = await getJSON<any>(\n      this.options.serviceUrl + location.lat + ',' + location.lng,\n      params\n    );\n    return this._parseResults(data);\n  }\n\n  private _parseResults(data) {\n    return data.resourceSets[0].resources.map((resource): GeocodingResult => {\n      const bbox = resource.bbox;\n      return {\n        name: resource.name,\n        bbox: new L.LatLngBounds([bbox[0], bbox[1]], [bbox[2], bbox[3]]),\n        center: new L.LatLng(...resource.point.coordinates as [number,number])\n      };\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Bing}\n * @param options the options\n */\nexport function bing(options?: Partial<BingOptions>) {\n  return new Bing(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { GeocodingResult, IGeocoder } from './api';\n\nexport interface AzureMapsOptions {\n  apiKey: string; // Azure Maps API Key\n  serviceUrl: string; // Optional: Base URL for the Azure Maps API\n}\n\n/**\n * Implementation of [Azure Maps Geocoding](https://www.microsoft.com/en-us/maps/azure/location-services/geocoding)\n *\n * https://learn.microsoft.com/en-us/rest/api/maps/search?view=rest-maps-1.0\n */\nexport class AzureMaps implements IGeocoder {\n  private options: AzureMapsOptions = {\n    apiKey: '',\n    serviceUrl: 'https://atlas.microsoft.com/search'\n  };\n\n  constructor(options: Partial<AzureMapsOptions>) {\n    L.Util.setOptions(this, options);\n    if (!this.options.apiKey) {\n      throw new Error('Azure Maps Geocoder requires an API key.');\n    }\n  }\n\n  /**\n   * {@inheritdoc}\n   * https://learn.microsoft.com/en-us/rest/api/maps/search/get-search-address?view=rest-maps-1.0&tabs=HTTP\n   */\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = {\n      'api-version': '1.0',\n      query,\n      'subscription-key': this.options.apiKey\n    };\n    const url = this.options.serviceUrl + '/address/json';\n    const data = await getJSON<AzureMapsResponse>(url, params);\n\n    return (data.results || []).map(\n      (result): GeocodingResult => ({\n        name: result.address.freeformAddress,\n        bbox: new L.LatLngBounds(\n          [result.viewport.topLeftPoint.lat, result.viewport.topLeftPoint.lon],\n          [result.viewport.btmRightPoint.lat, result.viewport.btmRightPoint.lon]\n        ),\n        center: new L.LatLng(result.position.lat, result.position.lon)\n      })\n    );\n  }\n\n  /**\n   * {@inheritdoc}\n   * https://learn.microsoft.com/en-us/rest/api/maps/search/get-search-address-reverse?view=rest-maps-1.0&tabs=HTTP\n   */\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = {\n      'api-version': '1.0',\n      query: location.lat + ',' + location.lng,\n      'subscription-key': this.options.apiKey\n    };\n    const url = this.options.serviceUrl + '/address/reverse/json';\n    const data = await getJSON<any>(url, params);\n\n    return (data.addresses || []).map(\n      (address): GeocodingResult => ({\n        name: address.address.freeformAddress,\n        bbox: new L.LatLngBounds(\n          [address.viewport.topLeftPoint.lat, address.viewport.topLeftPoint.lon],\n          [address.viewport.btmRightPoint.lat, address.viewport.btmRightPoint.lon]\n        ),\n        center: new L.LatLng(location.lat, location.lng)\n      })\n    );\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Azure}\n * @param options the options\n */\nexport function azure(options: AzureMapsOptions) {\n  return new AzureMaps(options);\n}\n\n/**\n * @internal\n */\nexport interface AzureMapsResponse {\n  summary: Summary;\n  results: Result[];\n}\n\ninterface Result {\n  type: string;\n  id: string;\n  score: number;\n  address: Address;\n  position: Position;\n  viewport: Viewport;\n  entryPoints: EntryPoint[];\n}\n\ninterface Address {\n  streetNumber: string;\n  streetName: string;\n  municipalitySubdivision: string;\n  municipality: string;\n  countrySecondarySubdivision: string;\n  countryTertiarySubdivision: string;\n  countrySubdivisionCode: string;\n  postalCode: string;\n  extendedPostalCode: string;\n  countryCode: string;\n  country: string;\n  countryCodeISO3: string;\n  freeformAddress: string;\n  countrySubdivisionName: string;\n}\n\ninterface EntryPoint {\n  type: string;\n  position: Position;\n}\n\ninterface Position {\n  lat: number;\n  lon: number;\n}\n\ninterface Viewport {\n  topLeftPoint: Position;\n  btmRightPoint: Position;\n}\n\ninterface Summary {\n  query: string;\n  queryType: string;\n  queryTime: number;\n  numResults: number;\n  offset: number;\n  totalResults: number;\n  fuzzyLevel: number;\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\n/**\n * Implementation of the [Google Geocoding API](https://developers.google.com/maps/documentation/geocoding/)\n */\nexport interface GoogleOptions extends GeocoderOptions {}\n\nexport class Google implements IGeocoder {\n  options: GoogleOptions = {\n    serviceUrl: 'https://maps.googleapis.com/maps/api/geocode/json'\n  };\n\n  constructor(options?: Partial<GoogleOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      key: this.options.apiKey,\n      address: query\n    });\n    const data = await getJSON<GoogleResponse>(this.options.serviceUrl, params);\n    return this._parseResults(data);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey,\n      latlng: location.lat + ',' + location.lng\n    });\n    const data = await getJSON<any>(this.options.serviceUrl, params);\n    return this._parseResults(data);\n  }\n\n  private _parseResults(data: GoogleResponse) {\n    return (data.results || [])?.map((loc): GeocodingResult => {\n      const center = new L.LatLng(loc.geometry.location.lat, loc.geometry.location.lng);\n      const bbox = new L.LatLngBounds(\n        new L.LatLng(loc.geometry.viewport.northeast.lat, loc.geometry.viewport.northeast.lng),\n        new L.LatLng(loc.geometry.viewport.southwest.lat, loc.geometry.viewport.southwest.lng)\n      );\n      return {\n        name: loc.formatted_address,\n        bbox,\n        center,\n        properties: loc.address_components\n      };\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Google}\n * @param options the options\n */\nexport function google(options?: Partial<GoogleOptions>) {\n  return new Google(options);\n}\n\n/**\n * @internal\n */\nexport interface GoogleResponse {\n  results: Result[];\n  status: string;\n}\n\ninterface Result {\n  address_components: AddressComponent[];\n  formatted_address: string;\n  geometry: Geometry;\n  place_id: string;\n  types: string[];\n}\n\ninterface AddressComponent {\n  long_name: string;\n  short_name: string;\n  types: string[];\n}\n\ninterface Geometry {\n  bounds: Bounds;\n  location: Location;\n  location_type: string;\n  viewport: Bounds;\n}\n\ninterface Bounds {\n  northeast: Location;\n  southwest: Location;\n}\n\ninterface Location {\n  lat: number;\n  lng: number;\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface HereOptions extends GeocoderOptions {\n  /**\n   * Use `apiKey` and the new `HEREv2` geocoder\n   * @deprecated\n   */\n  app_id: string;\n  /**\n   * Use `apiKey` and the new `HEREv2` geocoder\n   * @deprecated\n   */\n  app_code: string;\n  reverseGeocodeProxRadius?: any;\n  apiKey: string;\n  maxResults: number;\n}\n\n/**\n * Implementation of the [HERE Geocoder API](https://developer.here.com/documentation/geocoder/topics/introduction.html)\n */\nexport class HERE implements IGeocoder {\n  options: HereOptions = {\n    serviceUrl: 'https://geocoder.api.here.com/6.2/',\n    app_id: '',\n    app_code: '',\n    apiKey: '',\n    maxResults: 5\n  };\n\n  constructor(options?: Partial<HereOptions>) {\n    L.Util.setOptions(this, options);\n    if (options?.apiKey) throw Error('apiKey is not supported, use app_id/app_code instead!');\n  }\n\n  geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      searchtext: query,\n      gen: 9,\n      app_id: this.options.app_id,\n      app_code: this.options.app_code,\n      jsonattributes: 1,\n      maxresults: this.options.maxResults\n    });\n    return this.getJSON(this.options.serviceUrl + 'geocode.json', params);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    let prox = location.lat + ',' + location.lng;\n    if (this.options.reverseGeocodeProxRadius) {\n      prox += ',' + this.options.reverseGeocodeProxRadius;\n    }\n    const params = reverseParams(this.options, {\n      prox,\n      mode: 'retrieveAddresses',\n      app_id: this.options.app_id,\n      app_code: this.options.app_code,\n      gen: 9,\n      jsonattributes: 1,\n      maxresults: this.options.maxResults\n    });\n    return this.getJSON(this.options.serviceUrl + 'reversegeocode.json', params);\n  }\n\n  async getJSON(url: string, params: any): Promise<GeocodingResult[]> {\n    const data = await getJSON<any>(url, params);\n    return (data.response.view?.[0]?.result || []).map((result): GeocodingResult => {\n      const loc = result.location;\n      const center = new L.LatLng(loc.displayPosition.latitude, loc.displayPosition.longitude);\n      const bbox = new L.LatLngBounds(\n        new L.LatLng(loc.mapView.topLeft.latitude, loc.mapView.topLeft.longitude),\n        new L.LatLng(loc.mapView.bottomRight.latitude, loc.mapView.bottomRight.longitude)\n      );\n      return {\n        name: loc.address.label,\n        properties: loc.address,\n        bbox,\n        center\n      };\n    });\n  }\n}\n\n/**\n * Implementation of the new [HERE Geocoder API](https://developer.here.com/documentation/geocoding-search-api/api-reference-swagger.html)\n */\nexport class HEREv2 implements IGeocoder {\n  options: HereOptions = {\n    serviceUrl: 'https://geocode.search.hereapi.com/v1',\n    apiKey: '',\n    app_id: '',\n    app_code: '',\n    maxResults: 10\n  };\n\n  constructor(options?: Partial<HereOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      q: query,\n      apiKey: this.options.apiKey,\n      limit: this.options.maxResults\n    });\n\n    if (!params.at && !params.in) {\n      throw Error(\n        'at / in parameters not found. Please define coordinates (at=latitude,longitude) or other (in) in your geocodingQueryParams.'\n      );\n    }\n\n    return this.getJSON(this.options.serviceUrl + '/discover', params);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      at: location.lat + ',' + location.lng,\n      limit: this.options.reverseGeocodeProxRadius,\n      apiKey: this.options.apiKey\n    });\n    return this.getJSON(this.options.serviceUrl + '/revgeocode', params);\n  }\n\n  async getJSON(url: string, params: any): Promise<GeocodingResult[]> {\n    const data = await getJSON<HEREv2Response>(url, params);\n    return (data.items || []).map((item): GeocodingResult => {\n      const center = new L.LatLng(item.position.lat, item.position.lng);\n      let bbox: L.LatLngBounds;\n      if (item.mapView) {\n        bbox = new L.LatLngBounds(\n          new L.LatLng(item.mapView.south, item.mapView.west),\n          new L.LatLng(item.mapView.north, item.mapView.east)\n        );\n      } else {\n        // Using only position when not provided\n        bbox = new L.LatLngBounds(\n          new L.LatLng(item.position.lat, item.position.lng),\n          new L.LatLng(item.position.lat, item.position.lng)\n        );\n      }\n      return {\n        name: item.address.label,\n        properties: item.address,\n        bbox,\n        center\n      };\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link HERE}\n * @param options the options\n */\nexport function here(options?: Partial<HereOptions>) {\n  if (options?.apiKey) {\n    return new HEREv2(options);\n  } else {\n    return new HERE(options);\n  }\n}\n\n/**\n * @internal\n */\nexport interface HEREv2Response {\n  items: Item[];\n}\n\ninterface Item {\n  title: string;\n  id: string;\n  ontologyId: string;\n  resultType: string;\n  address: Address;\n  mapView?: MapView;\n  position: Position;\n  access: Position[];\n  distance: number;\n  categories: Category[];\n  references: Reference[];\n  foodTypes: Category[];\n  contacts: Contact[];\n  openingHours: OpeningHour[];\n}\n\ninterface MapView {\n  east: number;\n  north: number;\n  south: number;\n  west: number;\n}\n\ninterface Position {\n  lat: number;\n  lng: number;\n}\n\ninterface Address {\n  label: string;\n  countryCode: string;\n  countryName: string;\n  stateCode: string;\n  state: string;\n  county: string;\n  city: string;\n  district: string;\n  street: string;\n  postalCode: string;\n  houseNumber: string;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  primary?: boolean;\n}\n\ninterface Contact {\n  phone: Email[];\n  fax: Email[];\n  www: Email[];\n  email: Email[];\n}\n\ninterface Email {\n  value: string;\n}\n\ninterface OpeningHour {\n  text: string[];\n  isOpen: boolean;\n  structured: Structured[];\n}\n\ninterface Structured {\n  start: string;\n  duration: string;\n  recurrence: string;\n}\n\ninterface Reference {\n  supplier: Supplier;\n  id: string;\n}\n\ninterface Supplier {\n  id: string;\n}\n", "import * as L from 'leaflet';\nimport { IGeocoder, GeocodingResult } from './api';\n\nexport interface LatLngOptions {\n  /**\n   * The next geocoder to use for non-supported queries\n   */\n  next?: IGeocoder;\n  /**\n   * The size in meters used for passing to `LatLng.toBounds`\n   */\n  sizeInMeters: number;\n}\n\n/**\n * Parses basic latitude/longitude strings such as `'50.06773 14.37742'`, `'N50.06773 W14.37742'`, `'S 50° 04.064 E 014° 22.645'`, or `'S 50° 4′ 03.828″, W 14° 22′ 38.712″'`\n * @param query the latitude/longitude string to parse\n * @returns the parsed latitude/longitude\n */\nexport function parseLatLng(query: string): L.LatLng | undefined {\n  let match;\n  // regex from https://github.com/openstreetmap/openstreetmap-website/blob/master/app/controllers/geocoder_controller.rb\n  if ((match = query.match(/^([NS])\\s*(\\d{1,3}(?:\\.\\d*)?)\\W*([EW])\\s*(\\d{1,3}(?:\\.\\d*)?)$/))) {\n    // [NSEW] decimal degrees\n    return new L.LatLng(\n      (/N/i.test(match[1]) ? 1 : -1) * +match[2],\n      (/E/i.test(match[3]) ? 1 : -1) * +match[4]\n    );\n  } else if (\n    (match = query.match(/^(\\d{1,3}(?:\\.\\d*)?)\\s*([NS])\\W*(\\d{1,3}(?:\\.\\d*)?)\\s*([EW])$/))\n  ) {\n    // decimal degrees [NSEW]\n    return new L.LatLng(\n      (/N/i.test(match[2]) ? 1 : -1) * +match[1],\n      (/E/i.test(match[4]) ? 1 : -1) * +match[3]\n    );\n  } else if (\n    (match = query.match(\n      /^([NS])\\s*(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?\\W*([EW])\\s*(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?$/\n    ))\n  ) {\n    // [NSEW] degrees, decimal minutes\n    return new L.LatLng(\n      (/N/i.test(match[1]) ? 1 : -1) * (+match[2] + +match[3] / 60),\n      (/E/i.test(match[4]) ? 1 : -1) * (+match[5] + +match[6] / 60)\n    );\n  } else if (\n    (match = query.match(\n      /^(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?\\s*([NS])\\W*(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?\\s*([EW])$/\n    ))\n  ) {\n    // degrees, decimal minutes [NSEW]\n    return new L.LatLng(\n      (/N/i.test(match[3]) ? 1 : -1) * (+match[1] + +match[2] / 60),\n      (/E/i.test(match[6]) ? 1 : -1) * (+match[4] + +match[5] / 60)\n    );\n  } else if (\n    (match = query.match(\n      /^([NS])\\s*(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]?\\W*([EW])\\s*(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]?$/\n    ))\n  ) {\n    // [NSEW] degrees, minutes, decimal seconds\n    return new L.LatLng(\n      (/N/i.test(match[1]) ? 1 : -1) * (+match[2] + +match[3] / 60 + +match[4] / 3600),\n      (/E/i.test(match[5]) ? 1 : -1) * (+match[6] + +match[7] / 60 + +match[8] / 3600)\n    );\n  } else if (\n    (match = query.match(\n      /^(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]\\s*([NS])\\W*(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]?\\s*([EW])$/\n    ))\n  ) {\n    // degrees, minutes, decimal seconds [NSEW]\n    return new L.LatLng(\n      (/N/i.test(match[4]) ? 1 : -1) * (+match[1] + +match[2] / 60 + +match[3] / 3600),\n      (/E/i.test(match[8]) ? 1 : -1) * (+match[5] + +match[6] / 60 + +match[7] / 3600)\n    );\n  } else if ((match = query.match(/^\\s*([+-]?\\d+(?:\\.\\d*)?)\\s*[\\s,]\\s*([+-]?\\d+(?:\\.\\d*)?)\\s*$/))) {\n    return new L.LatLng(+match[1], +match[2]);\n  }\n}\n\n/**\n * Parses basic latitude/longitude strings such as `'50.06773 14.37742'`, `'N50.06773 W14.37742'`, `'S 50° 04.064 E 014° 22.645'`, or `'S 50° 4′ 03.828″, W 14° 22′ 38.712″'`\n */\nexport class LatLng implements IGeocoder {\n  options: LatLngOptions = {\n    next: undefined,\n    sizeInMeters: 10000\n  };\n\n  constructor(options?: Partial<LatLngOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string) {\n    const center = parseLatLng(query);\n    if (center) {\n      const results: GeocodingResult[] = [\n        {\n          name: query,\n          center: center,\n          bbox: center.toBounds(this.options.sizeInMeters)\n        }\n      ];\n      return results;\n    } else if (this.options.next) {\n      return this.options.next.geocode(query);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link LatLng}\n * @param options the options\n */\nexport function latLng(options?: Partial<LatLngOptions>) {\n  return new LatLng(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface MapboxOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [Mapbox Geocoding](https://www.mapbox.com/api-documentation/#geocoding)\n */\nexport class Mapbox implements IGeocoder {\n  options: MapboxOptions = {\n    serviceUrl: 'https://api.mapbox.com/geocoding/v5/mapbox.places/'\n  };\n\n  constructor(options?: Partial<MapboxOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  _getProperties(loc: Feature) {\n    const properties = {\n      text: loc.text,\n      address: loc.address\n    };\n\n    (loc.context || []).forEach(context => {\n      const id = context.id.split('.')[0];\n      properties[id] = context.text;\n\n      // Get country code when available\n      if (context.short_code) {\n        properties['countryShortCode'] = context.short_code;\n      }\n    });\n    return properties;\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const url = this.options.serviceUrl + encodeURIComponent(query) + '.json';\n    const params: any = geocodingParams(this.options, {\n      access_token: this.options.apiKey\n    });\n    if (\n      params.proximity !== undefined &&\n      params.proximity.lat !== undefined &&\n      params.proximity.lng !== undefined\n    ) {\n      params.proximity = params.proximity.lng + ',' + params.proximity.lat;\n    }\n    const data = await getJSON<MapboxResponse>(url, params);\n    return this._parseResults(data);\n  }\n\n  suggest(query: string): Promise<GeocodingResult[]> {\n    return this.geocode(query);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const url = this.options.serviceUrl + location.lng + ',' + location.lat + '.json';\n    const param = reverseParams(this.options, {\n      access_token: this.options.apiKey\n    });\n    const data = await getJSON<MapboxResponse>(url, param);\n    return this._parseResults(data);\n  }\n\n  private _parseResults(data: MapboxResponse): any[] | GeocodingResult[] {\n    if (!data.features?.length) {\n      return [];\n    }\n    return data.features.map((loc): GeocodingResult => {\n      const center = new L.LatLng(...loc.center.reverse() as [number, number]);\n      let bbox: L.LatLngBounds;\n      if (loc.bbox) {\n        bbox = new L.LatLngBounds(\n          new L.LatLng(...loc.bbox.slice(0, 2).reverse() as [number, number]),\n          new L.LatLng(...loc.bbox.slice(2, 4).reverse() as [number, number])\n        );\n      } else {\n        bbox = new L.LatLngBounds(center, center);\n      }\n      return {\n        name: loc.place_name,\n        bbox,\n        center,\n        properties: this._getProperties(loc)\n      };\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Mapbox}\n * @param options the options\n */\nexport function mapbox(options?: Partial<MapboxOptions>) {\n  return new Mapbox(options);\n}\n\n/**\n * @internal\n */\nexport interface MapboxResponse {\n  type: string;\n  query: string[];\n  features: Feature[];\n  attribution: string;\n}\n\ninterface Feature {\n  id: string;\n  type: string;\n  place_type: string[];\n  relevance: number;\n  properties: Properties;\n  text: string;\n  place_name: string;\n  matching_text: string;\n  matching_place_name: string;\n  center: [number, number];\n  bbox?: [number, number, number, number];\n  geometry: Geometry;\n  address: string;\n  context: Context[];\n}\n\ninterface Context {\n  id: string;\n  text: string;\n  wikidata?: string;\n  short_code?: string;\n}\n\ninterface Geometry {\n  type: string;\n  coordinates: number[];\n  interpolated: boolean;\n  omitted: boolean;\n}\n\ninterface Properties {}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface MapQuestOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [MapQuest Geocoding API](http://developer.mapquest.com/web/products/dev-services/geocoding-ws)\n */\nexport class MapQuest implements IGeocoder {\n  options: MapQuestOptions = {\n    serviceUrl: 'https://www.mapquestapi.com/geocoding/v1'\n  };\n\n  constructor(options?: Partial<MapQuestOptions>) {\n    L.Util.setOptions(this, options);\n    // MapQuest seems to provide URI encoded API keys,\n    // so to avoid encoding them twice, we decode them here\n    this.options.apiKey = decodeURIComponent(this.options.apiKey!);\n  }\n\n  _formatName(...parts: string[]) {\n    return parts.filter(s => !!s).join(', ');\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      key: this.options.apiKey,\n      location: query,\n      limit: 5,\n      outFormat: 'json'\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + '/address', params);\n    return this._parseResults(data);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey,\n      location: location.lat + ',' + location.lng,\n      outputFormat: 'json'\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + '/reverse', params);\n    return this._parseResults(data);\n  }\n\n  private _parseResults(data): GeocodingResult[] {\n    const locations = data.results?.[0]?.locations || [];\n    return locations.map((loc): GeocodingResult => {\n      const center = new L.LatLng(loc.latLng.lat, loc.latLng.lng);\n      return {\n        name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n        bbox: new L.LatLngBounds(center, center),\n        center\n      };\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link MapQuest}\n * @param options the options\n */\nexport function mapQuest(options?: Partial<MapQuestOptions>) {\n  return new MapQuest(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface NeutrinoOptions extends GeocoderOptions {\n  userId: string;\n}\n\n/**\n * Implementation of the [Neutrino API](https://www.neutrinoapi.com/api/geocode-address/)\n */\nexport class Neutrino implements IGeocoder {\n  options: NeutrinoOptions = {\n    userId: '',\n    apiKey: '',\n    serviceUrl: 'https://neutrinoapi.com/'\n  };\n\n  constructor(options?: Partial<NeutrinoOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  // https://www.neutrinoapi.com/api/geocode-address/\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      apiKey: this.options.apiKey,\n      userId: this.options.userId,\n      //get three words and make a dot based string\n      address: query.split(/\\s+/).join('.')\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + 'geocode-address', params);\n    if (!data.locations) {\n      return [];\n    }\n    data.geometry = data.locations[0];\n    const center = new L.LatLng(data.geometry.latitude, data.geometry.longitude);\n    const bbox = new L.LatLngBounds(center, center);\n    return [\n      {\n        name: data.geometry.address,\n        bbox,\n        center\n      }\n    ];\n  }\n\n  suggest(query: string): Promise<GeocodingResult[]> {\n    return this.geocode(query);\n  }\n\n  // https://www.neutrinoapi.com/api/geocode-reverse/\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      apiKey: this.options.apiKey,\n      userId: this.options.userId,\n      latitude: location.lat,\n      longitude: location.lng\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + 'geocode-reverse', params);\n    if (data.status.status !== 200 || !data.found) {\n      return [];\n    }\n    const center = new L.LatLng(location.lat, location.lng);\n    const bbox = new L.LatLngBounds(center, center);\n    return [\n      {\n        name: data.address,\n        bbox,\n        center\n      }\n    ];\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Neutrino}\n * @param options the options\n */\nexport function neutrino(options?: Partial<NeutrinoOptions>) {\n  return new Neutrino(options);\n}\n", "import * as L from 'leaflet';\nimport { template, getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport type NominatimResponse = NominatimResult[];\n\nexport interface NominatimResult {\n  place_id: number;\n  licence: string;\n  osm_type: string;\n  osm_id: number;\n  boundingbox: string[];\n  lat: string;\n  lon: string;\n  display_name: string;\n  class?: string;\n  type?: string;\n  importance?: number;\n  icon?: string;\n  address: NominatimAddress;\n}\n\nexport interface NominatimAddress {\n  building?: string;\n  city_district?: string;\n  city?: string;\n  country_code?: string;\n  country?: string;\n  county?: string;\n  hamlet?: string;\n  house_number?: string;\n  neighbourhood?: string;\n  postcode?: string;\n  road?: string;\n  state_district?: string;\n  state?: string;\n  suburb?: string;\n  village?: string;\n}\n\nexport interface NominatimOptions extends GeocoderOptions {\n  /**\n   * Additional URL parameters (strings) that will be added to geocoding requests; can be used to restrict results to a specific country for example, by providing the [`countrycodes`](https://wiki.openstreetmap.org/wiki/Nominatim#Parameters) parameter to Nominatim\n   */\n  geocodingQueryParams?: Record<string, unknown>;\n  /**\n   * A function that takes an GeocodingResult as argument and returns an HTML formatted string that represents the result. Default function breaks up address in parts from most to least specific, in attempt to increase readability compared to Nominatim's naming\n   */\n  htmlTemplate: (r: NominatimResult) => string;\n}\n\n/**\n * Implementation of the [Nominatim](https://wiki.openstreetmap.org/wiki/Nominatim) geocoder.\n *\n * This is the default geocoding service used by the control, unless otherwise specified in the options.\n *\n * Unless using your own Nominatim installation, please refer to the [Nominatim usage policy](https://operations.osmfoundation.org/policies/nominatim/).\n */\nexport class Nominatim implements IGeocoder {\n  options: NominatimOptions = {\n    serviceUrl: 'https://nominatim.openstreetmap.org/',\n    htmlTemplate(r: NominatimResult) {\n      const address = r.address;\n      let className: string;\n      const parts: string[] = [];\n      if (address.road || address.building) {\n        parts.push('{building} {road} {house_number}');\n      }\n\n      if (address.city || (address as any).town || address.village || address.hamlet) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-detail' : '';\n        parts.push(\n          '<span class=\"' + className + '\">{postcode} {city} {town} {village} {hamlet}</span>'\n        );\n      }\n\n      if (address.state || address.country) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-context' : '';\n        parts.push('<span class=\"' + className + '\">{state} {country}</span>');\n      }\n\n      return template(parts.join('<br/>'), address);\n    }\n  };\n\n  constructor(options?: Partial<NominatimOptions>) {\n    L.Util.setOptions(this, options || {});\n  }\n\n  async geocode(query: string) {\n    const params = geocodingParams(this.options, {\n      q: query,\n      limit: 5,\n      format: 'json',\n      addressdetails: 1\n    });\n    const data = await getJSON<NominatimResult[]>(this.options.serviceUrl + 'search', params);\n    return data.map((item): GeocodingResult => {\n      const bbox = item.boundingbox;\n      return {\n        icon: item.icon,\n        name: item.display_name,\n        html: this.options.htmlTemplate ? this.options.htmlTemplate(item) : undefined,\n        bbox: new L.LatLngBounds([+bbox[0], +bbox[2]], [+bbox[1], +bbox[3]]),\n        center: new L.LatLng(+item.lat, +item.lon),\n        properties: item\n      };\n    });\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number) {\n    const params = reverseParams(this.options, {\n      lat: location.lat,\n      lon: location.lng,\n      zoom: Math.round(Math.log(scale / 256) / Math.log(2)),\n      addressdetails: 1,\n      format: 'json'\n    });\n    const data = await getJSON<NominatimResult>(this.options.serviceUrl + 'reverse', params);\n    if (!data?.lat || !data?.lon) {\n      return [];\n    }\n    const center = new L.LatLng(+data.lat, +data.lon);\n    const bbox = new L.LatLngBounds(center, center);\n    return [\n      {\n        name: data.display_name,\n        html: this.options.htmlTemplate ? this.options.htmlTemplate(data) : undefined,\n        center,\n        bbox,\n        properties: data\n      }\n    ];\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Nominatim}\n * @param options the options\n */\nexport function nominatim(options?: Partial<NominatimOptions>) {\n  return new Nominatim(options);\n}\n", "import * as L from 'leaflet';\nimport { IGeocoder, GeocodingResult } from './api';\n\nexport interface OpenLocationCodeOptions {\n  OpenLocationCode: OpenLocationCodeApi;\n  codeLength?: number;\n}\n\nexport interface OpenLocationCodeApi {\n  encode(latitude: number, longitude: number, codeLength?: number): string;\n  decode(code: string): CodeArea;\n}\n\nexport interface CodeArea {\n  latitudeLo: number;\n  longitudeLo: number;\n  latitudeHi: number;\n  longitudeHi: number;\n  latitudeCenter: number;\n  longitudeCenter: number;\n  codeLength: number;\n}\n\n/**\n * Implementation of the [Plus codes](https://plus.codes/) (formerly OpenLocationCode) (requires [open-location-code](https://www.npmjs.com/package/open-location-code))\n */\nexport class OpenLocationCode implements IGeocoder {\n  options = {} as OpenLocationCodeOptions;\n  constructor(options?: Partial<OpenLocationCodeOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string) {\n    try {\n      const decoded = this.options.OpenLocationCode.decode(query);\n      const result: GeocodingResult = {\n        name: query,\n        center: new L.LatLng(decoded.latitudeCenter, decoded.longitudeCenter),\n        bbox: new L.LatLngBounds(\n          new L.LatLng(decoded.latitudeLo, decoded.longitudeLo),\n          new L.LatLng(decoded.latitudeHi, decoded.longitudeHi)\n        )\n      };\n      return [result];\n    } catch (e) {\n      console.warn(e); // eslint-disable-line no-console\n      return [];\n    }\n  }\n  async reverse(location: L.LatLngLiteral, scale: number) {\n    try {\n      const code = this.options.OpenLocationCode.encode(\n        location.lat,\n        location.lng,\n        this.options.codeLength\n      );\n      const result = {\n        name: code,\n        center: new L.LatLng(location.lat, location.lng),\n        bbox: new L.LatLngBounds(\n          new L.LatLng(location.lat, location.lng),\n          new L.LatLng(location.lat, location.lng)\n        )\n      };\n      return [result];\n    } catch (e) {\n      console.warn(e); // eslint-disable-line no-console\n      return [];\n    }\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link OpenLocationCode}\n * @param options the options\n */\nexport function openLocationCode(options?: Partial<OpenLocationCodeOptions>) {\n  return new OpenLocationCode(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface OpenCageOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [OpenCage Data API](https://opencagedata.com/)\n */\nexport class OpenCage implements IGeocoder {\n  options: OpenCageOptions = {\n    serviceUrl: 'https://api.opencagedata.com/geocode/v1/json'\n  };\n\n  constructor(options?: Partial<OpenCageOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      key: this.options.apiKey,\n      q: query\n    });\n    const data = await getJSON<any>(this.options.serviceUrl, params);\n    return this._parseResults(data);\n  }\n\n  suggest(query: string): Promise<GeocodingResult[]> {\n    return this.geocode(query);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey,\n      q: [location.lat, location.lng].join(',')\n    });\n    const data = await getJSON<any>(this.options.serviceUrl, params);\n    return this._parseResults(data);\n  }\n\n  private _parseResults(data): GeocodingResult[] {\n    return (data.results || []).map((loc): GeocodingResult => {\n      const center = new L.LatLng(loc.geometry.lat, loc.geometry.lng);\n      const bbox =\n        loc.annotations && loc.annotations.bounds\n          ? new L.LatLngBounds(\n              new L.LatLng(loc.annotations.bounds.northeast.lat, loc.annotations.bounds.northeast.lng),\n              new L.LatLng(loc.annotations.bounds.southwest.lat, loc.annotations.bounds.southwest.lng)\n            )\n          : new L.LatLngBounds(center, center);\n\n      return {\n        name: loc.formatted,\n        bbox,\n        center,\n        properties: loc\n      };\n    });\n  }\n}\n\nexport function opencage(options?: Partial<OpenCageOptions>) {\n  return new OpenCage(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface PeliasOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [Pelias](https://pelias.io/), [geocode.earth](https://geocode.earth/) geocoder (formerly Mapzen Search)\n */\nexport class Pelias implements IGeocoder {\n  options: PeliasOptions = {\n    serviceUrl: 'https://api.geocode.earth/v1'\n  };\n\n  constructor(options?: Partial<PeliasOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      api_key: this.options.apiKey,\n      text: query\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + '/search', params);\n    return this._parseResults(data);\n  }\n\n  async suggest(query: string): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, {\n      api_key: this.options.apiKey,\n      text: query\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + '/autocomplete', params);\n    return this._parseResults(data);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      api_key: this.options.apiKey,\n      'point.lat': location.lat,\n      'point.lon': location.lng\n    });\n    const data = await getJSON<any>(this.options.serviceUrl + '/reverse', params);\n    return this._parseResults(data);\n  }\n\n  _parseResults(data: GeoJSON.FeatureCollection<GeoJSON.Point>): GeocodingResult[] {\n    return (data.features || []).map((f): GeocodingResult => {\n      const c = f.geometry.coordinates;\n      const center = new L.LatLng(c[1], c[0]);\n\n      const bbox =\n        Array.isArray(f.bbox) && f.bbox.length === 4\n          ? new L.LatLngBounds([f.bbox[1], f.bbox[0]], [f.bbox[3], f.bbox[2]])\n          : new L.LatLngBounds(center, center);\n\n      return {\n        name: f.properties!.label,\n        center,\n        bbox,\n        properties: f.properties\n      };\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Pelias}\n * @param options the options\n */\nexport function pelias(options?: Partial<PeliasOptions>) {\n  return new Pelias(options);\n}\n\nexport const GeocodeEarth = Pelias;\nexport const geocodeEarth = pelias;\n\n/**\n * r.i.p.\n * @deprecated\n */\nexport const Mapzen = Pelias;\n/**\n * r.i.p.\n * @deprecated\n */\nexport const mapzen = pelias;\n\n/**\n * Implementation of the [Openrouteservice](https://openrouteservice.org/dev/#/api-docs/geocode) geocoder\n */\nexport class Openrouteservice extends Pelias {\n  constructor(options?: Partial<PeliasOptions>) {\n    super(\n      Object.assign(\n        {\n          serviceUrl: 'https://api.openrouteservice.org/geocode'\n        },\n        options\n      )\n    );\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Openrouteservice}\n * @param options the options\n */\nexport function openrouteservice(options?: Partial<PeliasOptions>) {\n  return new Openrouteservice(options);\n}\n\n/**\n * @internal\n */\nexport type PeliasResponse = GeoJSON.FeatureCollection<GeoJSON.Geometry, Properties> & {\n  geocoding: Geocoding;\n};\n\ninterface Identity {\n  id: string;\n  gid: string;\n  layer: string;\n  source: string;\n  source_id: string;\n}\n\ninterface Labels {\n  name: string;\n  label: string;\n  category?: string[];\n}\n\ninterface Hierarchy {\n  country_code?: string;\n\n  ocean?: string;\n  ocean_gid?: string;\n  ocean_a?: string;\n\n  marinearea?: string;\n  marinearea_gid?: string;\n  marinearea_a?: string;\n\n  continent?: string;\n  continent_gid?: string;\n  continent_a?: string;\n\n  empire?: string;\n  empire_gid?: string;\n  empire_a?: string;\n\n  country?: string;\n  country_gid?: string;\n  country_a?: string;\n\n  dependency?: string;\n  dependency_gid?: string;\n  dependency_a?: string;\n\n  macroregion?: string;\n  macroregion_gid?: string;\n  macroregion_a?: string;\n\n  region?: string;\n  region_gid?: string;\n  region_a?: string;\n\n  macrocounty?: string;\n  macrocounty_gid?: string;\n  macrocounty_a?: string;\n\n  county?: string;\n  county_gid?: string;\n  county_a?: string;\n\n  localadmin?: string;\n  localadmin_gid?: string;\n  localadmin_a?: string;\n\n  locality?: string;\n  locality_gid?: string;\n  locality_a?: string;\n\n  borough?: string;\n  borough_gid?: string;\n  borough_a?: string;\n\n  neighbourhood?: string;\n  neighbourhood_gid?: string;\n  neighbourhood_a?: string;\n\n  postalcode?: string;\n  postalcode_gid?: string;\n  postalcode_a?: string;\n}\n\ninterface Address {\n  unit?: string;\n  housenumber?: string;\n  street?: string;\n  postalcode?: string;\n}\n\ninterface Scoring {\n  accuracy: string;\n  confidence?: number;\n  distance?: number;\n  match_type?: string;\n}\n\ninterface Addendum {\n  addendum?: Record<string, Object>;\n}\n\ninterface Properties extends Identity, Labels, Scoring, Address, Hierarchy, Addendum {}\n\ninterface Geocoding {\n  version: string;\n  attribution: string;\n  query: Query;\n  warnings: string[];\n  engine: Engine;\n}\n\ninterface Engine {\n  name: string;\n  author: string;\n  version: string;\n}\n\ninterface Query {\n  size: number;\n  lang: {\n    name: string;\n    iso6391: string;\n    iso6393: string;\n    via: string;\n    defaulted: boolean\n  }\n  text?: string;\n  parser?: string;\n  parsed_text?: Record<string, string>;\n  sources?: string[];\n  layers?: string[];\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  GeocoderOptions,\n  GeocodingContext,\n  geocodingParams,\n  GeocodingResult,\n  IGeocoder,\n  reverseParams\n} from './api';\n\nexport interface PhotonOptions extends GeocoderOptions {\n  reverseUrl: string;\n  nameProperties: string[];\n  htmlTemplate?: (r: any) => string;\n}\n\n/**\n * Implementation of the [Photon](http://photon.komoot.io/) geocoder\n */\nexport class Photon implements IGeocoder {\n  options: PhotonOptions = {\n    serviceUrl: 'https://photon.komoot.io/api/',\n    reverseUrl: 'https://photon.komoot.io/reverse/',\n    nameProperties: ['name', 'street', 'suburb', 'hamlet', 'town', 'city', 'state', 'country']\n  };\n\n  constructor(options?: Partial<PhotonOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string, context?: GeocodingContext): Promise<GeocodingResult[]> {\n    const params = geocodingParams(this.options, { q: query });\n    const center = context?.map?.getCenter?.();\n    if (center) {\n      params.lat = center.lat;\n      params.lon = center.lng;\n    }\n    const zoom = context?.map?.getZoom?.();\n    if (zoom) {\n      params.zoom = zoom;\n    }\n    const data = await getJSON<any>(this.options.serviceUrl, params);\n    return this._parseResults(data);\n  }\n\n  suggest(query: string): Promise<GeocodingResult[]> {\n    return this.geocode(query);\n  }\n\n  async reverse(latLng: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const params = reverseParams(this.options, {\n      lat: latLng.lat,\n      lon: latLng.lng\n    });\n    const data = await getJSON<any>(this.options.reverseUrl, params);\n    return this._parseResults(data);\n  }\n\n  _parseResults(data: GeoJSON.FeatureCollection<GeoJSON.Point>): GeocodingResult[] {\n    return (data.features || []).map((f): GeocodingResult => {\n      const c = f.geometry.coordinates;\n      const center = new L.LatLng(c[1], c[0]);\n      const extent = f.properties?.extent;\n\n      const bbox = extent\n        ? new L.LatLngBounds([extent[1], extent[0]], [extent[3], extent[2]])\n        : new L.LatLngBounds(center, center);\n\n      return {\n        name: this._decodeFeatureName(f),\n        html: this.options.htmlTemplate ? this.options.htmlTemplate(f) : undefined,\n        center,\n        bbox,\n        properties: f.properties\n      };\n    });\n  }\n\n  _decodeFeatureName(f: GeoJSON.Feature) {\n    return (this.options.nameProperties || [])\n      .map(p => f.properties?.[p])\n      .filter(v => !!v)\n      .join(', ');\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Photon}\n * @param options the options\n */\nexport function photon(options?: Partial<PhotonOptions>) {\n  return new Photon(options);\n}\n\n/**\n * @internal\n */\nexport type PhotonResponse = GeoJSON.FeatureCollection<GeoJSON.Geometry, PhotonProperties>;\n\ninterface PhotonProperties {\n  osm_id: number;\n  osm_type: string;\n  extent?: number[];\n  country: string;\n  osm_key: string;\n  city: string;\n  countrycode: string;\n  osm_value: string;\n  name: string;\n  state: string;\n  type: string;\n  postcode?: string;\n  housenumber?: string;\n  street?: string;\n  district?: string;\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport { IGeocoder, GeocoderOptions, geocodingParams, GeocodingResult, reverseParams } from './api';\n\nexport interface What3WordsOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the What3Words service\n */\nexport class What3Words implements IGeocoder {\n  options: What3WordsOptions = {\n    serviceUrl: 'https://api.what3words.com/v2/'\n  };\n\n  constructor(options: Partial<What3WordsOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  async geocode(query: string): Promise<GeocodingResult[]> {\n    const data = await getJSON<any>(\n      this.options.serviceUrl + 'forward',\n      geocodingParams(this.options, {\n        key: this.options.apiKey,\n        //get three words and make a dot based string\n        addr: query.split(/\\s+/).join('.')\n      })\n    );\n    if (!data.geometry) {\n      return [];\n    }\n    const center = new L.LatLng(data.geometry['lat'], data.geometry['lng']);\n    const bbox = new L.LatLngBounds(center, center);\n    return [\n      {\n        name: data.words,\n        bbox,\n        center\n      }\n    ];\n  }\n\n  suggest(query: string): Promise<GeocodingResult[]> {\n    return this.geocode(query);\n  }\n\n  async reverse(location: L.LatLngLiteral, scale: number): Promise<GeocodingResult[]> {\n    const data = await getJSON<any>(\n      this.options.serviceUrl + 'reverse',\n      reverseParams(this.options, {\n        key: this.options.apiKey,\n        coords: [location.lat, location.lng].join(',')\n      })\n    );\n    if (data.status.status != 200) {\n      return [];\n    }\n    const center = new L.LatLng(data.geometry['lat'], data.geometry['lng']);\n    const bbox = new L.LatLngBounds(center, center);\n    return [\n      {\n        name: data.words,\n        bbox,\n        center\n      }\n    ];\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link What3Words}\n * @param options the options\n */\nexport function what3words(options: Partial<What3WordsOptions>) {\n  return new What3Words(options);\n}\n", "import * as L from 'leaflet';\nimport { Nominatim } from './geocoders/index';\nimport { IGeocoder, GeocodingResult, GeocodingContext } from './geocoders/api';\n\nexport interface GeocoderControlOptions extends L.ControlOptions {\n  /**\n   * Collapse control unless hovered/clicked\n   */\n  collapsed: boolean;\n  /**\n   * How to expand a collapsed control: `touch` or `click` or `hover`\n   */\n  expand: 'touch' | 'click' | 'hover';\n  /**\n   * Placeholder text for text input\n   */\n  placeholder: string;\n  /**\n   * Message when no result found / geocoding error occurs\n   */\n  errorMessage: string;\n  /**\n   * Accessibility label for the search icon used by screen readers\n   */\n  iconLabel: string;\n  /**\n   * Object to perform the actual geocoding queries\n   */\n  geocoder?: IGeocoder;\n  /**\n   * Immediately show the unique result without prompting for alternatives\n   */\n  showUniqueResult: boolean;\n  /**\n   * Show icons for geocoding results (if available); supported by Nominatim\n   */\n  showResultIcons: boolean;\n  /**\n   * Minimum number characters before suggest functionality is used (if available from geocoder)\n   */\n  suggestMinLength: number;\n  /**\n   * Number of milliseconds after typing stopped before suggest functionality is used (if available from geocoder)\n   */\n  suggestTimeout: number;\n  /**\n   * Initial query string for text input\n   */\n  query: string;\n  /**\n   * Minimum number of characters in search text before performing a query\n   */\n  queryMinLength: number;\n  /**\n   * Whether to mark a geocoding result on the map by default\n   */\n  defaultMarkGeocode: boolean;\n}\n\n/**\n * Event is fired when selecting a geocode result.\n * By default, the control will center the map on it and place a marker at its location.\n * To remove the control's default handler for marking a result, set {@link GeocoderControlOptions.defaultMarkGeocode} to `false`.\n */\nexport type MarkGeocodeEvent = { geocode: GeocodingResult };\nexport type MarkGeocodeEventHandlerFn = (event: MarkGeocodeEvent) => void;\n\n/**\n * Event is fired before invoking {@link IGeocoder.geocode} (or {@link IGeocoder.suggest}).\n * The event data contains the query string as `input`.\n */\nexport type StartGeocodeEvent = { input: string };\nexport type StartGeocodeEventHandlerFn = (event: StartGeocodeEvent) => void;\n\n/**\n * Event is fired before after receiving results from {@link IGeocoder.geocode} (or {@link IGeocoder.suggest}).\n * The event data contains the query string as `input` and the geocoding `results`.\n */\nexport type FinishGeocodeEvent = { input: string; results: GeocodingResult[] };\nexport type FinishGeocodeEventHandlerFn = (event: FinishGeocodeEvent) => void;\n\ndeclare module 'leaflet' {\n  interface Evented {\n    on(type: 'markgeocode', fn: MarkGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'startgeocode', fn: StartGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'startsuggest', fn: StartGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'finishsuggest', fn: FinishGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'finishgeocode', fn: FinishGeocodeEventHandlerFn, context?: any): this;\n  }\n}\n\n/**\n * Leaflet mixins https://leafletjs.com/reference-1.7.1.html#class-includes\n * for TypeScript https://www.typescriptlang.org/docs/handbook/mixins.html\n * @internal\n */\nclass EventedControl {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  constructor(...args: any[]) {\n    // empty\n  }\n}\n\n/**\n * @internal\n */\ninterface EventedControl extends L.Control, L.Evented {}\nObject.getOwnPropertyNames(L.Control.prototype).forEach(\n  k => (EventedControl.prototype[k] = L.Control.prototype[k])\n);\nObject.getOwnPropertyNames(L.Evented.prototype).forEach(\n  k => (EventedControl.prototype[k] = L.Evented.prototype[k])\n);\n\n/**\n * This is the geocoder control. It works like any other [Leaflet control](https://leafletjs.com/reference.html#control), and is added to the map.\n */\nexport class GeocoderControl extends EventedControl {\n  options: GeocoderControlOptions = {\n    showUniqueResult: true,\n    showResultIcons: false,\n    collapsed: true,\n    expand: 'touch',\n    position: 'topright',\n    placeholder: 'Search...',\n    errorMessage: 'Nothing found.',\n    iconLabel: 'Initiate a new search',\n    query: '',\n    queryMinLength: 1,\n    suggestMinLength: 3,\n    suggestTimeout: 250,\n    defaultMarkGeocode: true\n  };\n\n  private _alts: HTMLUListElement;\n  private _container: HTMLDivElement;\n  private _errorElement: HTMLDivElement;\n  private _geocodeMarker: L.Marker;\n  private _input: HTMLInputElement;\n  private _lastGeocode: string;\n  private _map: L.Map;\n  private _preventBlurCollapse: boolean;\n  private _requestCount = 0;\n  private _results: any;\n  private _selection: any;\n  private _suggestTimeout: any;\n\n  /**\n   * Instantiates a geocoder control (to be invoked using `new`)\n   * @param options the options\n   */\n  constructor(options?: Partial<GeocoderControlOptions>) {\n    super(options);\n    L.Util.setOptions(this, options);\n    if (!this.options.geocoder) {\n      this.options.geocoder = new Nominatim();\n    }\n  }\n\n  addThrobberClass() {\n    this._container.classList.add('leaflet-control-geocoder-throbber');\n  }\n\n  removeThrobberClass() {\n    this._container.classList.remove('leaflet-control-geocoder-throbber');\n  }\n\n  /**\n   * Returns the container DOM element for the control and add listeners on relevant map events.\n   * @param map the map instance\n   * @see https://leafletjs.com/reference.html#control-onadd\n   */\n  onAdd(map: L.Map) {\n    const className = 'leaflet-control-geocoder';\n    const container = L.DomUtil.create('div', className + ' leaflet-bar');\n    const icon = L.DomUtil.create('button', className + '-icon', container);\n    const form = L.DomUtil.create('div', className + '-form', container);\n\n    this._map = map;\n    this._container = container;\n\n    icon.innerHTML = '&nbsp;';\n    icon.type = 'button';\n    icon.setAttribute('aria-label', this.options.iconLabel);\n\n    const input = (this._input = L.DomUtil.create('input', '', form));\n    input.type = 'search';\n    input.value = this.options.query;\n    input.placeholder = this.options.placeholder;\n    L.DomEvent.disableClickPropagation(input);\n\n    this._errorElement = L.DomUtil.create('div', className + '-form-no-error', container);\n    this._errorElement.innerHTML = this.options.errorMessage;\n\n    this._alts = L.DomUtil.create(\n      'ul',\n      className + '-alternatives leaflet-control-geocoder-alternatives-minimized',\n      container\n    );\n    L.DomEvent.disableClickPropagation(this._alts);\n\n    L.DomEvent.on(input, 'keydown', this._keydown, this);\n    if (this.options.geocoder?.suggest) {\n      L.DomEvent.on(input, 'input', this._change, this);\n    }\n    L.DomEvent.on(input, 'blur', () => {\n      if (this.options.collapsed && !this._preventBlurCollapse) {\n        this._collapse();\n      }\n      this._preventBlurCollapse = false;\n    });\n\n    if (this.options.collapsed) {\n      if (this.options.expand === 'click') {\n        L.DomEvent.on(container, 'click', (e: Event) => {\n          if ((e as MouseEvent).button === 0 && (e as MouseEvent).detail !== 2) {\n            this._toggle();\n          }\n        });\n      } else if (this.options.expand === 'touch') {\n        L.DomEvent.on(\n          container,\n          L.Browser.touch ? 'touchstart mousedown' : 'mousedown',\n          (e: Event) => {\n            this._toggle();\n            e.preventDefault(); // mobile: clicking focuses the icon, so UI expands and immediately collapses\n            e.stopPropagation();\n          },\n          this\n        );\n      } else {\n        L.DomEvent.on(container, 'mouseover', this._expand, this);\n        L.DomEvent.on(container, 'mouseout', this._collapse, this);\n        this._map.on('movestart', this._collapse, this);\n      }\n    } else {\n      this._expand();\n      if (L.Browser.touch) {\n        L.DomEvent.on(container, 'touchstart', () => this._geocode());\n      } else {\n        L.DomEvent.on(container, 'click', () => this._geocode());\n      }\n    }\n\n    if (this.options.defaultMarkGeocode) {\n      this.on('markgeocode', this.markGeocode, this);\n    }\n\n    this.on('startgeocode', this.addThrobberClass, this);\n    this.on('finishgeocode', this.removeThrobberClass, this);\n    this.on('startsuggest', this.addThrobberClass, this);\n    this.on('finishsuggest', this.removeThrobberClass, this);\n\n    L.DomEvent.disableClickPropagation(container);\n\n    return container;\n  }\n\n  /**\n   * Sets the query string on the text input\n   * @param string the query string\n   */\n  setQuery(string: string): this {\n    this._input.value = string;\n    return this;\n  }\n\n  private _geocodeResult(results: GeocodingResult[], suggest: boolean) {\n    if (!suggest && this.options.showUniqueResult && results.length === 1) {\n      this._geocodeResultSelected(results[0]);\n    } else if (results.length > 0) {\n      this._alts.innerHTML = '';\n      this._results = results;\n      this._alts.classList.remove('leaflet-control-geocoder-alternatives-minimized');\n      this._container.classList.add('leaflet-control-geocoder-options-open');\n      this._results.forEach((result, i) => this._alts.appendChild(this._createAlt(result, i)));\n    } else {\n      this._container.classList.add('leaflet-control-geocoder-options-error');\n      this._errorElement.classList.add('leaflet-control-geocoder-error');\n    }\n  }\n\n  /**\n   * Marks a geocoding result on the map\n   * @param result the geocoding result\n   */\n  markGeocode(event: MarkGeocodeEvent) {\n    const result = event.geocode;\n\n    this._map.fitBounds(result.bbox);\n\n    if (this._geocodeMarker) {\n      this._map.removeLayer(this._geocodeMarker);\n    }\n\n    this._geocodeMarker = new L.Marker(result.center)\n      .bindPopup(result.html || result.name)\n      .addTo(this._map)\n      .openPopup();\n\n    return this;\n  }\n\n  private async _geocode(suggest: boolean = false) {\n    const value = this._input.value;\n    if (!suggest && value.length < this.options.queryMinLength) {\n      return;\n    }\n\n    const requestCount = ++this._requestCount;\n    this._lastGeocode = value;\n    if (!suggest) {\n      this._clearResults();\n    }\n\n    const event: StartGeocodeEvent = { input: value };\n    this.fire(suggest ? 'startsuggest' : 'startgeocode', event);\n\n    const context: GeocodingContext = { map: this._map };\n    const results = suggest\n      ? await this.options.geocoder!.suggest!(value, context)\n      : await this.options.geocoder!.geocode(value, context);\n\n    if (requestCount === this._requestCount) {\n      const event: FinishGeocodeEvent = { input: value, results };\n      this.fire(suggest ? 'finishsuggest' : 'finishgeocode', event);\n      this._geocodeResult(results, suggest);\n    }\n  }\n\n  private _geocodeResultSelected(geocode: GeocodingResult) {\n    const event: MarkGeocodeEvent = { geocode };\n    this.fire('markgeocode', event);\n  }\n\n  private _toggle() {\n    if (this._container.classList.contains('leaflet-control-geocoder-expanded')) {\n      this._collapse();\n    } else {\n      this._expand();\n    }\n  }\n\n  private _expand() {\n    this._container.classList.add('leaflet-control-geocoder-expanded');\n    this._input.select();\n    this.fire('expand');\n  }\n\n  private _collapse() {\n    this._container.classList.remove('leaflet-control-geocoder-expanded');\n    this._alts.classList.add('leaflet-control-geocoder-alternatives-minimized');\n    this._errorElement.classList.remove('leaflet-control-geocoder-error');\n    this._container.classList.remove('leaflet-control-geocoder-options-open');\n    this._container.classList.remove('leaflet-control-geocoder-options-error');\n    this._input.blur(); // mobile: keyboard shouldn't stay expanded\n    this.fire('collapse');\n  }\n\n  private _clearResults() {\n    this._alts.classList.add('leaflet-control-geocoder-alternatives-minimized');\n    this._selection = null;\n    this._errorElement.classList.remove('leaflet-control-geocoder-error');\n    this._container.classList.remove('leaflet-control-geocoder-options-open');\n    this._container.classList.remove('leaflet-control-geocoder-options-error');\n  }\n\n  private _createAlt(result: GeocodingResult, index: number) {\n    const li = L.DomUtil.create('li', ''),\n      a = L.DomUtil.create('a', '', li),\n      icon = this.options.showResultIcons && result.icon ? L.DomUtil.create('img', '', a) : null,\n      text = result.html ? undefined : document.createTextNode(result.name),\n      mouseDownHandler = (e: Event) => {\n        // In some browsers, a click will fire on the map if the control is\n        // collapsed directly after mousedown. To work around this, we\n        // wait until the click is completed, and _then_ collapse the\n        // control. Messy, but this is the workaround I could come up with\n        // for #142.\n        this._preventBlurCollapse = true;\n        L.DomEvent.stop(e);\n        this._geocodeResultSelected(result);\n        L.DomEvent.on(li, 'click touchend', () => {\n          if (this.options.collapsed) {\n            this._collapse();\n          } else {\n            this._clearResults();\n          }\n        });\n      };\n\n    if (icon) {\n      icon.src = result.icon!;\n    }\n\n    li.setAttribute('data-result-index', String(index));\n\n    if (result.html) {\n      a.innerHTML = a.innerHTML + result.html;\n    } else if (text) {\n      a.appendChild(text);\n    }\n\n    // Use mousedown and not click, since click will fire _after_ blur,\n    // causing the control to have collapsed and removed the items\n    // before the click can fire.\n    L.DomEvent.on(li, 'mousedown touchstart', mouseDownHandler, this);\n\n    return li;\n  }\n\n  private _keydown(e: KeyboardEvent) {\n    const select = (dir: number) => {\n      if (this._selection) {\n        this._selection.classList.remove('leaflet-control-geocoder-selected');\n        this._selection = this._selection[dir > 0 ? 'nextSibling' : 'previousSibling'];\n      }\n      if (!this._selection) {\n        this._selection = this._alts[dir > 0 ? 'firstChild' : 'lastChild'];\n      }\n\n      if (this._selection) {\n        this._selection.classList.add('leaflet-control-geocoder-selected');\n      }\n    };\n\n    switch (e.key) {\n      case 'Escape':\n        if (this.options.collapsed) {\n          this._collapse();\n        } else {\n          this._clearResults();\n        }\n        break;\n      case 'ArrowUp':\n        select(-1);\n        break;\n      case 'ArrowDown':\n        select(1);\n        break;\n      case 'Enter':\n        if (this._selection) {\n          const index = parseInt(this._selection.getAttribute('data-result-index'), 10);\n          this._geocodeResultSelected(this._results[index]);\n          this._clearResults();\n        } else {\n          this._geocode();\n        }\n        break;\n      default:\n        return;\n    }\n\n    L.DomEvent.preventDefault(e);\n  }\n\n  private _change() {\n    const v = this._input.value;\n    if (v !== this._lastGeocode) {\n      clearTimeout(this._suggestTimeout);\n      if (v.length >= this.options.suggestMinLength) {\n        this._suggestTimeout = setTimeout(() => this._geocode(true), this.options.suggestTimeout);\n      } else {\n        this._clearResults();\n      }\n    }\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link GeocoderControl}\n * @param options the options\n */\nexport function geocoder(options?: Partial<GeocoderControlOptions>) {\n  return new GeocoderControl(options);\n}\n", "/* @preserve\n * Leaflet Control Geocoder\n * https://github.com/perliedman/leaflet-control-geocoder\n *\n * Copyright (c) 2012 sa3m (https://github.com/sa3m)\n * Copyright (c) 2018 Per Liedman\n * All rights reserved.\n */\nimport * as L from 'leaflet';\nimport { GeocoderControl as Geocoder, geocoder } from './control';\nimport * as geocoders from './geocoders/index';\nimport './style.css';\n\nObject.assign(Geocoder, geocoders);\nexport default Geocoder;\nexport { Geocoder, geocoder, geocoders };\n\nObject.assign(L.Control, {\n  Geocoder: Geocoder,\n  geocoder: geocoder\n});\n"],
  "mappings": "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",
  "names": ["geocodingParams", "options", "params", "reverseParams", "badChars", "possible", "escape", "escapeChar", "chr", "htmlEscape", "string", "getJSON", "url", "headers", "request", "key", "value", "v", "response", "template", "str", "data", "ArcGis", "L", "query", "loc", "center", "bbox", "location", "scale", "arcgis", "Bing", "resource", "bing", "AzureMaps", "result", "address", "azure", "Google", "google", "HERE", "prox", "HEREv2", "item", "here", "parseLatLng", "match", "LatLng", "latLng", "Mapbox", "properties", "context", "id", "param", "mapbox", "MapQuest", "parts", "s", "mapQuest", "Neutrino", "neutrino", "Nominatim", "r", "className", "nominatim", "OpenLocationCode", "decoded", "e", "openLocationCode", "OpenCage", "opencage", "Pelias", "f", "c", "pelias", "GeocodeEarth", "geocodeEarth", "Mapzen", "mapzen", "Openrouteservice", "openrouteservice", "Photon", "zoom", "extent", "p", "photon", "What3Words", "what3words", "EventedControl", "args", "k", "GeocoderControl", "map", "container", "icon", "form", "input", "results", "suggest", "i", "event", "requestCount", "geocode", "index", "li", "a", "text", "mouseDownHandler", "select", "dir", "geocoder", "Geocoder", "geocoders"]
}
